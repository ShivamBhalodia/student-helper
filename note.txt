> reducers
    -   A reducer is a function that determines changes to an applicationâ€™s state. 
        It uses the action it receives to   determine this change.
    -   Redux relies heavily on reducer functions that take the previous state and an action 
        in order to execute the next state.
    -   Redux Toolkit (via using reducer) allows us to write "mutating" logic in reducers. It
            doesn't actually mutate the state because it uses the Immer library,
            which detects changes to a "draft state" and produces a brand new
            immutable state based off those changes
        eg. login, logout 

> useSelector
    -   useSelector is a function that takes the current state as an argument and returns whatever data you want from it. 
        It's very similiar to mapStateToProps() and it allows you to store the return values inside a variable within 
        the scope of you functional components instead of passing down as props.

> image styling
    -   fill - This is default. The image is resized to fill the given dimension. 
        If necessary, the image will be stretched or squished to fit
    -   contain - The image keeps its aspect ratio, but is resized to fit within the given dimension
    -   cover - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit
    -   none - The image is not resized
    -   scale-down - the image is scaled down to the smallest version of none or contain

> const provider = new firebase.auth.GoogleAuthProvider();
    - same can be done for facebook or apple.

> const dispatch = useDispatch();
    -   This hook returns a reference to the dispatch function from the Redux store. 
        You may use it to dispatch actions as needed.